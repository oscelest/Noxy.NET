@inherits BaseInputValue<int>

<div @attributes="AdditionalAttributes" class="@CssClass">

    <Button class="first" disabled="@FirstDisabled" @onclick="FirstButtonClickHandler">
        @if (First == null)
        {
            <IconFastBackwards />
        }
        else
        {
            @First
        }
    </Button>

    <Button class="previous" disabled="@PreviousDisabled" @onclick="PreviousButtonClickHandler">
        @if (Previous == null)
        {
            <IconBackwards />
        }
        else
        {
            @Previous
        }
    </Button>

    @* <InputFieldNumber class="page" DisplayName="@DisplayName" OptionList="OptionList" Min="MinPageValue" Max="MaxPageValue" @bind-Value:get="GetValue()" @bind-Value:set="SetValue" /> *@

    <Button class="next" disabled="@NextDisabled" @onclick="NextButtonClickHandler">
        @if (Next == null)
        {
            <IconForward />
        }
        else
        {
            @Next
        }
    </Button>

    <Button class="last" disabled="@LastDisabled" @onclick="LastButtonClickHandler">
        @if (Last == null)
        {
            <IconFastForward />
        }
        else
        {
            @Last
        }
    </Button>

</div>

@code {

    [Parameter, EditorRequired]
    public int PageSize { get; set; }
    private int PageSizeCurrent => Math.Max(PageSize, MinPageValue);

    [Parameter, EditorRequired]
    public int Count { get; set; }
    private int CountCurrent => Math.Max(Count, MinCount);

    [Parameter]
    public IEnumerable<int?>? OptionList { get; set; }
    
    [Parameter]
    public RenderFragment? First { get; set; }

    [Parameter]
    public RenderFragment? Previous { get; set; }

    [Parameter]
    public RenderFragment? Next { get; set; }

    [Parameter]
    public RenderFragment? Last { get; set; }

    [Parameter]
    public bool? Disabled { get; set; }
    private bool DisabledCurrent => Disabled ?? false;
    
    private const int MinCount = 0;
    private const int MinPageValue = 1;
    private int MaxPageValue => Math.Max(MinPageValue, (CountCurrent - 1) / PageSizeCurrent + 1);

    private bool FirstDisabled => DisabledCurrent || Value == MinPageValue;
    private bool PreviousDisabled => DisabledCurrent || Value == MinPageValue;
    private bool NextDisabled => DisabledCurrent || Value == MaxPageValue;
    private bool LastDisabled => DisabledCurrent || Value == MaxPageValue;

    private double? GetValue()
    {
        return (double)Value;
    }
    
    private void SetValue(double? value)
    {
        ValueChanged.InvokeAsync((int)(value ?? MinPageValue));
    }
    
    private void Commit(int? value)
    {
        int page = ClampPage(value);
        ValueChanged.InvokeAsync(page);
    }

    private int ClampPage(int? value)
    {
        return Math.Clamp(value ?? MinPageValue, MinPageValue, MaxPageValue);
    }
    
    private void FirstButtonClickHandler()
    {
        Commit(MinPageValue);
    }

    private void PreviousButtonClickHandler()
    {
        Commit(Value - 1);
    }

    private void NextButtonClickHandler()
    {
        Commit(Value + 1);
    }

    private void LastButtonClickHandler()
    {
        Commit(MaxPageValue);
    }

}