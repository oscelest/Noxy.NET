@inject TextService TextService
@inherits ElementComponent

<div @attributes="AdditionalAttributes" class="@CssClass">
    @{
        EntitySchemaProperty[] list = Schema.PropertyList?.Select(x => x.GetValue()).ToArray() ?? [];
        IEnumerable<EntitySchemaPropertyBoolean> listBoolean = list.OfType<EntitySchemaPropertyBoolean>();
        IEnumerable<EntitySchemaPropertyDateTime> listDateTime = list.OfType<EntitySchemaPropertyDateTime>();
        IEnumerable<EntitySchemaPropertyDecimal> listDecimal = list.OfType<EntitySchemaPropertyDecimal>();
        IEnumerable<EntitySchemaPropertyInteger> listInteger = list.OfType<EntitySchemaPropertyInteger>();
        IEnumerable<EntitySchemaPropertyString> listString = list.OfType<EntitySchemaPropertyString>();
    }

    <Collapsible>
        <Header>
            <h3>Properties</h3>
        </Header>
        <Content>
            <div>
                <TemplateSchemaOverview Schema="Schema" List="listBoolean">
                    <Header>
                        <h4>Boolean properties</h4>
                    </Header>
                    <Form>
                        <FormSchemaPropertyBoolean Schema="Schema" Value="context" OnChange="FormChange"/>
                    </Form>
                </TemplateSchemaOverview>

                <TemplateSchemaOverview Schema="Schema" List="listDateTime">
                    <Header>
                        <h4>DateTime properties</h4>
                    </Header>
                    <Form>
                        <FormSchemaPropertyDateTime Schema="Schema" Value="context" OnChange="FormChange"/>
                    </Form>
                </TemplateSchemaOverview>

                <TemplateSchemaOverview Schema="Schema" List="listDecimal">
                    <Header>
                        <h4>Decimal properties</h4>
                    </Header>
                    <Form>
                        <FormSchemaPropertyDecimal Schema="Schema" Value="context" OnChange="FormChange"/>
                    </Form>
                </TemplateSchemaOverview>

                <TemplateSchemaOverview Schema="Schema" List="listInteger">
                    <Header>
                        <h4>Integer properties</h4>
                    </Header>
                    <Form>
                        <FormSchemaPropertyInteger Schema="Schema" Value="context" OnChange="FormChange"/>
                    </Form>
                </TemplateSchemaOverview>

                <TemplateSchemaOverview Schema="Schema" List="listString">
                    <Header>
                        <h4>String properties</h4>
                    </Header>
                    <Form>
                        <FormSchemaPropertyString Schema="Schema" Value="context" OnChange="FormChange"/>
                    </Form>
                </TemplateSchemaOverview>
            </div>
        </Content>

    </Collapsible>
</div>

@code {

    [Parameter, EditorRequired]
    public required EntitySchema Schema { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (!firstRender) return;

        await WithLoader(TextService.Resolve);
    }

    private void FormChange(EntitySchemaProperty entity)
    {
        Schema.PropertyList = Schema.PropertyList?.Where(x => x.ID != entity.ID).Append(new(entity)).OrderBy(x => x.GetValue().Order).ToList();
    }

}
