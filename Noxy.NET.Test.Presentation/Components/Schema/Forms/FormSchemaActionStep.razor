@inherits BaseComponentFormSchema<FormModelSchemaActionStep, EntitySchemaActionStep>

<div @attributes="AdditionalAttributes" class="@CssClass">
    <TemplateSchemaForm Context="Context" FormSubmit="FormSubmit">
        <Header>
            @HeaderText
        </Header>

        <Content>
            <SidebarLeftLayout>
                <Sidebar>
                    <InputGroupText DisplayName="@GetDisplayName(nameof(Context.Model.SchemaIdentifier))" Description="@GetDescription(nameof(Context.Model.SchemaIdentifier))" @bind-Value="Context.Model.SchemaIdentifier"/>
                    <InputGroupText DisplayName="@GetDisplayName(nameof(Context.Model.Name))" Description="@GetDescription(nameof(Context.Model.Name))" @bind-Value="Context.Model.Name"/>
                    <InputGroupText DisplayName="@GetDisplayName(nameof(Context.Model.Note))" Description="@GetDescription(nameof(Context.Model.Note))" @bind-Value="Context.Model.Note"/>
                    <InputGroupText DisplayName="@GetDisplayName(nameof(Context.Model.Title))" Description="@GetDescription(nameof(Context.Model.Title))" @bind-Value="Context.Model.Title"/>
                    <InputGroupText DisplayName="@GetDisplayName(nameof(Context.Model.Description))" Description="@GetDescription(nameof(Context.Model.Description))" @bind-Value="Context.Model.Description"/>
                </Sidebar>
                <Content>
                    <TemplateSchemaEntitySelect T="EntityJunctionSchemaActionStepHasActionInput" Current="GetCurrentList()" Available="GetAvailableList()" OnAdd="AddActionInput" OnRemove="RemoveActionInput" OnChange="ChangeList"/>
                </Content>
            </SidebarLeftLayout>
        </Content>

        <Actions>
            <Button Loading="Context.IsSubmitting" Status="StatusEnum.Success" type="submit">
                @SubmitText
            </Button>
        </Actions>
    </TemplateSchemaForm>
</div>


@code {

    private string HeaderText => Context.Model.ID != Guid.Empty ? TextConstants.UpdateFormHeaderEntitySchemaActionStep : TextConstants.CreateFormHeaderEntitySchemaActionStep;

    protected override WebFormContext<FormModelSchemaActionStep> CreateContext()
    {
        return new(new(Value) { SchemaID = Schema.ID });
    }

    private void AddActionInput(EntityJunctionSchemaActionStepHasActionInput input)
    {
        Context.Model.ActionInputList?.Add(new(input) { Order = Context.Model.ActionInputList.Count });
    }

    private void RemoveActionInput(EntityJunctionSchemaActionStepHasActionInput input)
    {
        Context.Model.ActionInputList = Context.Model.ActionInputList?.Where(x => x.RelationID != input.RelationID).ToList();
    }

    private void ChangeList(IEnumerable<EntityJunctionSchemaActionStepHasActionInput> list)
    {
        Context.Model.ActionInputList = list.Select((x, i) => new FormModelAssociationSchemaActionStepHasActionInput(x)).ToList();
    }

    private EntityJunctionSchemaActionStepHasActionInput GetActionInput(FormModelAssociationSchemaActionStepHasActionInput form)
    {
        return new()
        {
            ID = form.ID,
            Order = form.Order,
            EntityID = form.EntityID,
            Entity = Schema.ActionStepList?.FirstOrDefault(x => x.ID == form.EntityID) ?? throw new KeyNotFoundException(form.EntityID.ToString()),
            RelationID = form.RelationID,
            Relation = Schema.ActionInputList?.FirstOrDefault(x => x.ID == form.RelationID) ?? throw new KeyNotFoundException(form.EntityID.ToString()),
        };
    }

    private EntityJunctionSchemaActionStepHasActionInput[] GetCurrentList()
    {
        return Context.Model.ActionInputList?.OrderBy(x => x.Order).Select(GetActionInput).ToArray() ?? [];
    }

    private EntityJunctionSchemaActionStepHasActionInput[] GetAvailableList()
    {
        List<FormModelAssociationSchemaActionStepHasActionInput> list = Context.Model.ActionInputList ?? [];
        return Schema.ActionInputList?
            .Where(x => list.All(y => y.RelationID != x.ID))
            .OrderBy(x => x.Order)
            .Select(x => GetActionInput(new FormModelAssociationSchemaActionStepHasActionInput()
            {
                Order = 0,
                EntityID = Value?.ID ?? Guid.Empty,
                RelationID = x.ID,
            }))
            .ToArray() ?? [];
    }

}
