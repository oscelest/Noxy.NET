@inherits ElementComponent
@typeparam T

<div @attributes="AdditionalAttributes" class="@CssClass">
    @for (int i = 0; i < List.Count(); i++)
    {
        int index = i;

        <div class="item">
            @ChildContent(index)

            @if (i == 0 && IsListCurrent)
            {
                <Button type="button" Status="StatusEnum.Highlight" @onclick="AddRow">+</Button>
            }
            @if (i > 0)
            {
                <Button type="button" Status="StatusEnum.Error" @onclick="() => RemoveRow(index)">X</Button>
            }
        </div>
    }
</div>

@code {

    [Parameter, EditorRequired]
    public required IEnumerable<T?> List { get; set; }

    [Parameter, EditorRequired]
    public required RenderFragment<int> ChildContent { get; set; }

    [Parameter]
    public bool? IsList { get; set; }
    private bool IsListCurrent => IsList ?? false;

    [Parameter]
    public EventCallback OnAdd { get; set; }

    [Parameter]
    public EventCallback<int> OnRemove { get; set; }

    private void AddRow()
    {
        OnAdd.InvokeAsync();
    }

    private void RemoveRow(int index)
    {
        OnRemove.InvokeAsync(index);
    }

}