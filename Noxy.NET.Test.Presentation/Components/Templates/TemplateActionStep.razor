@inject ActionHubService ActionHubService
@inherits ElementComponent

<div @attributes="AdditionalAttributes" class="@CssClass">
    @foreach (ViewModelSchemaActionStepHasActionInput field in (ActionStep.ActionInputList ?? []).OrderBy(x => x.Order))
    {
        <div class="action-input">
            @if (Context?.CollectionVisibility.TryGetValue(field.ActionInput?.SchemaIdentifier ?? string.Empty, out bool _) ?? false)
            {
                <DynamicComponent Type="ActionHubService.GetActionInput(field.ActionInput?.Input?.SchemaIdentifier)" Parameters="GetFieldParameters(field.ActionInput, Context)"/>
            }
        </div>
    }
</div>

@code {

    [Parameter, EditorRequired]
    public ContextAction? Context { get; set; }

    [Parameter, EditorRequired]
    public required ViewModelSchemaActionStep ActionStep { get; set; }

    private IDictionary<string, object?> GetFieldParameters(ViewModelSchemaActionInput? field, ContextAction context)
    {
        return new Dictionary<string, object?>
        {
            { nameof(BaseComponentActionInput.ID), UUIDCode },
            { nameof(BaseComponentActionInput.Reference), context.ID },
            { nameof(BaseComponentActionInput.Context), context.CollectionField.GetValueOrDefault(field?.SchemaIdentifier ?? string.Empty) },
            { nameof(BaseComponentActionInput.ActionInput), field },
        };
    }

}