@inject IJSRuntime JS
@inherits ElementComponent
@typeparam T where T : BaseEntity

<div @attributes="AdditionalAttributes" class="@CssClass">
    <div class="column">
        <span>Current:</span>

        <SortableList List="Current" OnLoad="OnLoad">
            <Collapsible>
                <Header>
                    <div class="header">
                        <div class="handle">
                            <IconDraggable Size="IconSizeEnum.ExtraSmall"/>
                        </div>
                        <span class="title">
                        @if (HeaderTemplate != null)
                            {
                                @HeaderTemplate(context)
                            }
                            else
                            {
                                @context.ToString()
                            }
                    </span>
                        <Button type="button" Status="StatusEnum.Error" Size="ButtonSizeEnum.ExtraSmall" @onclick="EventCallback.Factory.Create(this, () => OnRemove.InvokeAsync(context))">
                            <IconSaltire Size="IconSizeEnum.ExtraExtraSmall"/>
                        </Button>
                    </div>
                </Header>
                <Content>
                    <div class="content">
                        @if (ContentTemplate != null)
                        {
                            @ContentTemplate(context)
                        }
                        else
                        {
                            <TemplateEntityDisplay Entity="context"/>
                        }
                    </div>
                </Content>
            </Collapsible>
        </SortableList>
    </div>

    <div class="column">
        <span>Available:</span>

        <div class="list">
            @foreach (T item in Available)
            {
                <Collapsible>
                    <Header>
                        <div class="header">
                            <span class="title">
                                @if (HeaderTemplate != null)
                                {
                                    @HeaderTemplate(item)
                                }
                                else
                                {
                                    @item.ToString()
                                }
                            </span>
                            <Button type="button" Status="StatusEnum.Success" Size="ButtonSizeEnum.ExtraSmall" @onclick="EventCallback.Factory.Create(this, () => OnAdd.InvokeAsync(item))">
                                <IconPlus Size="IconSizeEnum.ExtraExtraSmall"/>
                            </Button>
                        </div>
                    </Header>
                    <Content>
                        <div class="content">
                            @if (ContentTemplate != null)
                            {
                                @ContentTemplate(item)
                            }
                            else
                            {
                                <TemplateEntityDisplay Entity="item"/>
                            }
                        </div>
                    </Content>
                </Collapsible>
            }
        </div>
    </div>
</div>

@code {

    [Parameter, EditorRequired]
    public required IEnumerable<T> Current { get; set; }

    [Parameter, EditorRequired]
    public required IEnumerable<T> Available { get; set; }

    [Parameter]
    public RenderFragment? Filter { get; set; }

    [Parameter]
    public RenderFragment<T>? HeaderTemplate { get; set; }

    [Parameter]
    public RenderFragment<T>? ContentTemplate { get; set; }

    [Parameter]
    public EventCallback<T> OnAdd { get; set; }

    [Parameter]
    public EventCallback<T> OnRemove { get; set; }

    [Parameter]
    public EventCallback<IEnumerable<T>> OnChange { get; set; }

    private IJSObjectReference? _module;
    private ElementReference _refElement;
    private DotNetObjectReference<TemplateSchemaEntitySelect<T>>? _refClass;

    private async Task OnLoad(ElementReference reference)
    {
        _refElement = reference;
        _refClass ??= DotNetObjectReference.Create(this);

        _module ??= await JS.InvokeAsync<IJSObjectReference>("import", JS.GetComponentPath(typeof(TemplateSchemaEntitySelect<T>)));
        await _module.InvokeVoidAsync("Register", _refElement, _refClass, nameof(OnSort));
    }

    [JSInvokable]
    public void OnSort(int oldIndex, int newIndex)
    {
        List<T> list = Current.ToList();
        List<T> ordered = list.MoveItem(oldIndex, newIndex);
        OnChange.InvokeAsync(ordered);
    }

}
