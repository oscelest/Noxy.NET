@typeparam T where T : BaseEntityTemplate
@inherits ElementComponent
@inject TextService TextService

<div @attributes="AdditionalAttributes" class="@CssClass">
    <Collapsible>
        <Header>
            @Header
        </Header>
        <Content>
            <div class="edit-content">
                @if (!Schema.IsActive)
                {
                    <SidebarRightLayout>
                        <Content>
                            <div class="edit-list">
                                @foreach (T item in List ?? [])
                                {
                                    <Collapsible>
                                        <Header>
                                            <div class="edit-header">
                                                @item.Name
                                            </div>
                                        </Header>
                                        <Content>
                                            <div class="update">
                                                @Form?.Invoke(item)
                                            </div>
                                        </Content>
                                    </Collapsible>
                                }
                            </div>
                        </Content>
                        <Sidebar>
                            @Form?.Invoke(null)
                        </Sidebar>
                    </SidebarRightLayout>
                }
                else
                {
                    <SidebarRightLayout>
                        <Content>
                            <div class="list">
                                @foreach (T item in List ?? [])
                                {
                                    <Collapsible>
                                        <Header>
                                            <div class="display-header">
                                                @item.Name
                                            </div>
                                        </Header>
                                        <Content>
                                            <div class="display-content">
                                                @if (Display != null)
                                                {
                                                    @Display(item)
                                                }
                                                else
                                                {
                                                    List<(string Title, string Description, string Value)> display = GetDisplay(item);
                                                    @foreach ((string Title, string Description, string Value) tuple in display)
                                                    {
                                                        <TemplateInputGroup DisplayName="@TextService.Get(tuple.Title)" Description="@TextService.Get(tuple.Title)">
                                                            <span>@tuple.Value.DefaultIfEmpty(TextConstants.DefaultEmptyValue)</span>
                                                        </TemplateInputGroup>
                                                    }
                                                }
                                            </div>
                                        </Content>
                                    </Collapsible>
                                }
                            </div>
                        </Content>
                    </SidebarRightLayout>
                }
            </div>
        </Content>
    </Collapsible>
</div>

@code {

    [Parameter]
    public RenderFragment? Header { get; set; }

    [Parameter]
    public RenderFragment<T?>? Form { get; set; }

    [Parameter]
    public RenderFragment<T>? Display { get; set; }

    [Parameter, EditorRequired]
    public required IEnumerable<T>? List { get; set; }

    [Parameter, EditorRequired]
    public required EntitySchema Schema { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (!firstRender) return;

        if (Display == null)
        {
            await WithLoader(TextService.Resolve);
        }
    }

    private List<(string Title, string Description, string Value)> GetDisplay(T item)
    {
        List<(string Title, string Description, string Value)> result = [];
        IEnumerable<PropertyInfo> propsWithAttribute = typeof(T).GetProperties().Where(prop => Attribute.IsDefined(prop, typeof(DisplayNameAttribute)));

        foreach (PropertyInfo prop in propsWithAttribute)
        {
            string title = prop.GetCustomAttribute<DisplayNameAttribute>()?.DisplayName ?? string.Empty;
            string description = prop.GetCustomAttribute<DescriptionAttribute>()?.Description ?? string.Empty;
            string value = prop.GetValue(item)?.ToString() ?? string.Empty;
            result.Add((title, description, value));
        }

        return result;
    }

}