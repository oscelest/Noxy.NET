@inject UserAuthenticationStateProvider AuthService
@inject DataAPIService DataAPIService
@inherits ElementComponent

<div @attributes="AdditionalAttributes" class="@CssClass">
    <div class="header">
        <div class="logo">
            <NavLink href="/">
                <h1>Hello world</h1>
            </NavLink>
        </div>
        <div class="navigation">
            <NavLink href="/Schema">Schema List</NavLink>
            @foreach (ViewModelSchemaContext item in _listContext)
            {
                <NavLink href="@GetLink(item)">@item.Title</NavLink>
            }
        </div>
        <div class="account">
            @if (AuthService.Identity != null)
            {
                <Button @onclick="LogOut">Log out</Button>
            }
        </div>
    </div>
    <main class="content">
        @ChildContent
    </main>
</div>

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private ViewModelSchemaContext[] _listContext = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (!firstRender) return;
        
        _listContext = await DataAPIService.GetContextList();
        await InvokeAsync(StateHasChanged);
    }

    private static string GetLink(ViewModelSchemaContext context)
    {
        return $"/Context/{context.SchemaIdentifier}";
    }
    
    private async void LogOut()
    {
        try
        {
            await AuthService.ResetIdentity();
        }
        catch (Exception)
        {
            // ignored
        }
    }
}