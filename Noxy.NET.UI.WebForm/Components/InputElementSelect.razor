@inherits BaseInputValue<TValue>
@typeparam TValue

<select @attributes="AdditionalAttributes" class="@CssClass" name="@NameCurrent" @onchange="OnInputChange">
    @for (var i = 0; i < OptionList.Count(); i++)
    {
        var index = i;
        var item = OptionList.ElementAt(i);
        var isChecked = EqualityComparer<TValue>.Default.Equals(Value, item);

        <option @attributes="OptionAttributes?.Invoke(item)" value="@index" selected="@isChecked">
            @ChildContent(item)
        </option>
    }
</select>

@code {

    [Parameter, EditorRequired]
    public required IEnumerable<TValue> OptionList { get; set; }

    [Parameter, EditorRequired]
    public required RenderFragment<TValue> ChildContent { get; set; }

    [Parameter]
    public string? Name { get; set; }
    private string NameCurrent => Name ?? UUIDCode;

    [Parameter]
    public Func<TValue, IReadOnlyDictionary<string, object>?>? OptionAttributes { get; set; }

    private void OnInputChange(ChangeEventArgs args)
    {
        if (!int.TryParse(args.Value?.ToString(), out int parsed)) return;

        var item = OptionList.ElementAtOrDefault(parsed);
        if (item == null) return;

        NotifyChange(item);
    }

}